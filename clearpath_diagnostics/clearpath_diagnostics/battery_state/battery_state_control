#!/usr/bin/env python3

# Software License Agreement (BSD)
#
# @author    Roni Kreinin <rkreinin@clearpathrobotics.com>
# @copyright (c) 2023, Clearpath Robotics, Inc., All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * Neither the name of Clearpath Robotics nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# Redistribution and use in source and binary forms, with or without
# modification, is not permitted without the express permission
# of Clearpath Robotics.

import os

import rclpy
from rclpy.node import Node
from rclpy.qos import qos_profile_sensor_data

from clearpath_platform_msgs.msg import HMI
from sensor_msgs.msg import BatteryState

from clearpath_config.clearpath_config import ClearpathConfig
from clearpath_config.common.types.platform import Platform
from clearpath_generator_common.common import BaseGenerator


class BatteryStateControl(Node):
    def __init__(self, setup_path='/etc/clearpath'):
        super().__init__('battery_state_control')
        self.setup_path = setup_path

        # Define paths
        self.config_path = os.path.join(self.setup_path, 'robot.yaml')

        # Parse YAML into config
        self.clearpath_config = ClearpathConfig(self.config_path)
        self.platform = self.clearpath_config.platform.get_platform_model()

        self.battery_state_sub = self.create_subscription(
            BatteryState,
            'platform/bms/state',
            self.battery_state_callback,
            qos_profile_sensor_data)

        match self.platform:
            case Platform.J100:
                self.hmi_battery_pub = self.create_publisher(
                    HMI,
                    'platform/mcu/_hmi',
                    qos_profile_sensor_data)

                self.hmi_msg = HMI()

    def hmi_control(self, percentage: float):
        if percentage >= 0.5:
            self.hmi_msg.battery_color = HMI.GREEN
            self.hmi_msg.battery_pattern = HMI.ON
        elif percentage >= 0.2:
            self.hmi_msg.battery_color = HMI.YELLOW
            self.hmi_msg.battery_pattern = HMI.ON
        elif percentage >= 0.1:
            self.hmi_msg.battery_color = HMI.RED
            self.hmi_msg.battery_pattern = HMI.ON
        else:
            self.hmi_msg.battery_color = HMI.RED
            self.hmi_msg.battery_pattern = HMI.BLINK
        self.hmi_battery_pub.publish(self.hmi_msg)

    def battery_state_callback(self, msg: BatteryState):
        match self.platform:
            case Platform.J100:
                self.hmi_control(msg.percentage)


def main():
    setup_path = BaseGenerator.get_args()
    rclpy.init()

    bsc = BatteryStateControl(setup_path)

    rclpy.spin(bsc)

    bsc.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
