#!/usr/bin/env python3

# Software License Agreement (BSD)
#
# @author    Roni Kreinin <rkreinin@clearpathrobotics.com>
# @copyright (c) 2023, Clearpath Robotics, Inc., All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * Neither the name of Clearpath Robotics nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# Redistribution and use in source and binary forms, with or without
# modification, is not permitted without the express permission
# of Clearpath Robotics.

from clearpath_config.parser import ClearpathConfigParser
from clearpath_config.common import File

from clearpath_launch_generator.launch_writer import LaunchWriter, LaunchFile, Package
from clearpath_launch_generator.sensors import SensorLaunch

import getopt
import os
import sys


class LaunchGenerator():
    def __init__(self, config: File = None,
                 output_path: str = '/etc/clearpath/') -> None:
        if config:
            self.config_path = config.get_path()
        else:
            self.config_path = '/etc/clearpath/robot.yaml'

        self.launch_path = output_path
        os.makedirs(os.path.dirname(self.launch_path + '/sensors/launch/'), exist_ok=True)
        os.makedirs(os.path.dirname(self.launch_path + '/sensors/config/'), exist_ok=True)

        self.pkg_clearpath_sensors = Package('clearpath_sensors')
        self.pkg_clearpath_platform = Package('clearpath_platform')

        # Read YAML
        self.config = ClearpathConfigParser.read_yaml(self.config_path)
        # Parse YAML into config
        self.clearpath_config = ClearpathConfigParser(self.config)

        self.sensors_launch_file = LaunchFile(
            'sensors',
            path=os.path.join(self.launch_path, 'sensors/launch/'))

        self.platform_launch_file = LaunchFile(
            'platform',
            package=self.pkg_clearpath_platform,
            args={
              'platform_model': self.clearpath_config.platform.get_model()
            })

        self.robot_launch_file = LaunchFile(
            'robot',
            path=os.path.join(self.launch_path))

    def generate(self) -> None:
        self.generate_sensors()
        self.generate_robot()

    def generate_sensors(self) -> None:
        sensors_launch_writer = LaunchWriter(self.sensors_launch_file)

        sensors = self.clearpath_config.sensors.get_all_sensors()
        for sensor in sensors:
            if sensor.get_launch_enabled():
                print(sensor.get_topic())
                sensor_launch = SensorLaunch(sensor)

                sensor_writer = LaunchWriter(sensor_launch.get_launch_file())
                sensor_writer.add_launch_file(sensor_launch.default_sensor_launch_file)
                sensor_writer.generate_file()

                sensors_launch_writer.add_launch_file(sensor_launch.sensor_launch_file)

        sensors_launch_writer.generate_file()

    def generate_robot(self) -> None:
        robot_launch_writer = LaunchWriter(self.robot_launch_file)

        robot_launch_writer.add_launch_file(self.platform_launch_file)
        robot_launch_writer.add_launch_file(self.sensors_launch_file)
        robot_launch_writer.generate_file()


def main():
    # Get options
    argv = sys.argv[1:5]

    try:
        options, args = getopt.getopt(argv, 'c:o:', ['config=', 'output_path='])
    except getopt.GetoptError as err:
        print(err)

    config = None
    output_path = '/etc/clearpath'

    for option, value in options:
        if option in ('-c', '--config'):
            config = File(path=value, exists=True)
        elif option in ('-o', '--output_path'):
            output_path = value
        else:
            pass

    lg = LaunchGenerator(config, output_path)
    lg.generate()


if __name__ == '__main__':
    main()
